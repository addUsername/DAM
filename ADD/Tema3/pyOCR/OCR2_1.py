# -*- coding: utf-8 -*-
"""
Created on Mon Jan 18 17:05:09 2021
https://www.geeksforgeeks.org/python-reading-contents-of-pdf-using-ocr-optical-character-recognition/
"""
import pytesseract
import os
import re
from PIL import Image
import xml.etree.ElementTree as ET
import timeit

pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

folder = os.path.join(os.getcwd(), "output")


# get image path
def getImagesPath(index):
    imgQ = os.path.join(folder, "Q"+str(index)+".jpeg")
    imgA = os.path.join(folder, "A"+str(index)+".jpeg")
    return (imgQ, imgA)

# do magic
def doMagicRaw(imgQ, imgA):
    text = pytesseract.image_to_string(Image.open(imgQ))
    textAnswer = pytesseract.image_to_string(Image.open(imgA))
    return (text, textAnswer)

# get output
def parseOutput(text, textAnswer):
    questionsList = [i for i in text.split("\n") if (i != '') and (i != ' ')]
    answersList = [i for i in textAnswer.split("\n") if (i != '') and (i != ' ')]
    print(questionsList)
    print(answersList)
    return (questionsList, answersList)

def shouldJoinQuestion(question):
    
    if (re.match("^[A-Z#].*$", question) != None):
        return True
    
    return False

def shouldJoinAnswer(answer):
    if (re.match("^[a-z]*,.*$", answer) == None):
        return True
    if (re.match("^[A-Z#].*$", answer) != None):
        return True
    
    return False
    

# process output
def cleanOutput(questionsList, answersList):
    questions = ["", "", ""]
    index = 0
    
    for i in range(3):
    
        if (index+1 > len(questionsList)):
            questions[i] = questionsList[-1]
        elif (shouldJoinQuestion(questionsList[index+1][0])):
            questions[i] = questionsList[index]
            index += 1
        else:
            questions[i] = questionsList[index] + " " + questionsList[index+1]
            index += 2
    
    answers = ["", "", ""]
    index = 0
    
    for i in range(3):
    
        if (index+1 > len(answersList)):
            answers[i] = answersList[-1]
        elif (shouldJoinAnswer(answersList[index+1][0])):
            answers[i] = answersList[index]
            index += 1
        else:
            answers[i] = answersList[index] + " " + answersList[index+1]
            index += 2
    
    return (questions, answers)

def createQuestionElement(root, questions, answers):
    for i in range(3):
        questionXml = ET.SubElement(root, "pregunta")
    
        textXml = ET.SubElement(questionXml, "texto")
        textXml.text = questions[i]
    
        ans0 = ET.SubElement(questionXml, "respuesta1")
        ans0.text = answers[0]
    
        ans1 = ET.SubElement(questionXml, "respuesta2")
        ans1.text = answers[1]
    
        ans2 = ET.SubElement(questionXml, "respuesta3")
        ans2.text = answers[2]
    
        sol = ET.SubElement(questionXml, "correcta")
        sol.text = answers[i]
    
def main():
    
    start = timeit.timeit()
    
    # create .xml
    root = ET.Element("juego")
    root.append(ET.Comment("Generated by OCR2.py for add.dam2.p3,MainModel.java"))
    
    for i in range (2,111,2):
        print("total: "+ str(i/2))
        imgQ, imgA = getImagesPath(i)
        text, textAnswer = doMagicRaw(imgQ,imgA)
        questionsList, answersList = parseOutput(text, textAnswer)
        questions, answers = cleanOutput(questionsList, answersList)
        createQuestionElement(root, questions, answers)

    xml = ET.ElementTree(root)
    xml.write("preguntas.xml", encoding="utf-8", xml_declaration=True)
    # print(pytesseract.image_to_string(Image.open(imgA)))
    end = timeit.timeit()
    print("finish: it took:" + str(end - start))

if __name__ == "__main__":
    main()